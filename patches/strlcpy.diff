--- example.c.orig	2004-10-23 17:11:55.000000000 -0700
+++ example.c	2008-07-29 11:38:24.000000000 -0700
@@ -7,6 +7,7 @@
 
 #include <stdio.h>
 #include "zlib.h"
+#include "local.h"
 
 #ifdef STDC
 #  include <string.h>
@@ -66,7 +67,7 @@
     err = compress(compr, &comprLen, (const Bytef*)hello, len);
     CHECK_ERR(err, "compress");
 
-    strcpy((char*)uncompr, "garbage");
+    STRLCPY((char*)uncompr, "garbage", uncomprLen);
 
     err = uncompress(uncompr, &uncomprLen, compr, comprLen);
     CHECK_ERR(err, "uncompress");
@@ -117,7 +118,7 @@
         fprintf(stderr, "gzopen error\n");
         exit(1);
     }
-    strcpy((char*)uncompr, "garbage");
+    STRLCPY((char*)uncompr, "garbage", uncomprLen);
 
     if (gzread(file, uncompr, (unsigned)uncomprLen) != len) {
         fprintf(stderr, "gzread err: %s\n", gzerror(file, &err));
@@ -211,7 +212,7 @@
     int err;
     z_stream d_stream; /* decompression stream */
 
-    strcpy((char*)uncompr, "garbage");
+    STRLCPY((char*)uncompr, "garbage", uncomprLen);
 
     d_stream.zalloc = (alloc_func)0;
     d_stream.zfree = (free_func)0;
@@ -307,7 +308,7 @@
     int err;
     z_stream d_stream; /* decompression stream */
 
-    strcpy((char*)uncompr, "garbage");
+    STRLCPY((char*)uncompr, "garbage", uncomprLen);
 
     d_stream.zalloc = (alloc_func)0;
     d_stream.zfree = (free_func)0;
@@ -386,7 +387,7 @@
     int err;
     z_stream d_stream; /* decompression stream */
 
-    strcpy((char*)uncompr, "garbage");
+    STRLCPY((char*)uncompr, "garbage", uncomprLen);
 
     d_stream.zalloc = (alloc_func)0;
     d_stream.zfree = (free_func)0;
@@ -467,7 +468,7 @@
     int err;
     z_stream d_stream; /* decompression stream */
 
-    strcpy((char*)uncompr, "garbage");
+    STRLCPY((char*)uncompr, "garbage", uncomprLen);
 
     d_stream.zalloc = (alloc_func)0;
     d_stream.zfree = (free_func)0;
--- gzio.c.orig	2005-07-11 13:31:48.000000000 -0700
+++ gzio.c	2008-07-29 11:41:07.000000000 -0700
@@ -10,6 +10,7 @@
 #include <stdio.h>
 
 #include "zutil.h"
+#include "local.h"
 
 #ifdef NO_DEFLATE       /* for compatibility with old definition */
 #  define NO_GZCOMPRESS
@@ -102,6 +103,7 @@
     gz_stream *s;
     char fmode[80]; /* copy of mode, without the compression level */
     char *m = fmode;
+    size_t len;
 
     if (!path || !mode) return Z_NULL;
 
@@ -124,11 +126,12 @@
     s->msg = NULL;
     s->transparent = 0;
 
-    s->path = (char*)ALLOC(strlen(path)+1);
+    len = strlen(path) + 1;
+    s->path = (char*)ALLOC(len);
     if (s->path == NULL) {
         return destroy(s), (gzFile)Z_NULL;
     }
-    strcpy(s->path, path); /* do this early for debugging */
+    STRLCPY(s->path, path, len); /* do this early for debugging */
 
     s->mode = '\0';
     do {
@@ -223,7 +226,7 @@
     char name[46];      /* allow for up to 128-bit integers */
 
     if (fd < 0) return (gzFile)Z_NULL;
-    sprintf(name, "<fd:%d>", fd); /* for debugging */
+    SNPRINTF(name, sizeof(name),"<fd:%d>", fd); /* for debugging */
 
     return gz_open (name, mode, fd);
 }
@@ -608,17 +611,6 @@
 
     buf[sizeof(buf) - 1] = 0;
     va_start(va, format);
-#ifdef NO_vsnprintf
-#  ifdef HAS_vsprintf_void
-    (void)vsprintf(buf, format, va);
-    va_end(va);
-    for (len = 0; len < sizeof(buf); len++)
-        if (buf[len] == 0) break;
-#  else
-    len = vsprintf(buf, format, va);
-    va_end(va);
-#  endif
-#else
 #  ifdef HAS_vsnprintf_void
     (void)vsnprintf(buf, sizeof(buf), format, va);
     va_end(va);
@@ -627,7 +619,6 @@
     len = vsnprintf(buf, sizeof(buf), format, va);
     va_end(va);
 #  endif
-#endif
     if (len <= 0 || len >= (int)sizeof(buf) || buf[sizeof(buf) - 1] != 0)
         return 0;
     return gzwrite(file, buf, (unsigned)len);
@@ -645,26 +636,14 @@
     int len;
 
     buf[sizeof(buf) - 1] = 0;
-#ifdef NO_snprintf
-#  ifdef HAS_sprintf_void
-    sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
-            a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
-    for (len = 0; len < sizeof(buf); len++)
-        if (buf[len] == 0) break;
-#  else
-    len = sprintf(buf, format, a1, a2, a3, a4, a5, a6, a7, a8,
-                a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
-#  endif
-#else
 #  ifdef HAS_snprintf_void
-    snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
+    SNPRINTF(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
              a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
     len = strlen(buf);
 #  else
-    len = snprintf(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
+    len = SNPRINTF(buf, sizeof(buf), format, a1, a2, a3, a4, a5, a6, a7, a8,
                  a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
 #  endif
-#endif
     if (len <= 0 || len >= sizeof(buf) || buf[sizeof(buf) - 1] != 0)
         return 0;
     return gzwrite(file, buf, len);
@@ -990,6 +969,7 @@
 {
     char *m;
     gz_stream *s = (gz_stream*)file;
+    size_t len;
 
     if (s == NULL) {
         *errnum = Z_STREAM_ERROR;
@@ -1003,11 +983,12 @@
     if (m == NULL || *m == '\0') m = (char*)ERR_MSG(s->z_err);
 
     TRYFREE(s->msg);
-    s->msg = (char*)ALLOC(strlen(s->path) + strlen(m) + 3);
+    len = strlen(s->path) + strlen(m) + 3;
+    s->msg = (char*)ALLOC(len);
     if (s->msg == Z_NULL) return (const char*)ERR_MSG(Z_MEM_ERROR);
-    strcpy(s->msg, s->path);
-    strcat(s->msg, ": ");
-    strcat(s->msg, m);
+    STRLCPY(s->msg, s->path, len);
+    STRLCAT(s->msg, ": ", len);
+    STRLCAT(s->msg, m, len);
     return (const char*)s->msg;
 }
 
--- local.h.orig	2008-07-29 11:38:24.000000000 -0700
+++ local.h	2008-07-29 11:39:40.000000000 -0700
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2008 Apple Inc. All rights reserved.
+ *
+ * @APPLE_LICENSE_HEADER_START@
+ * 
+ * This file contains Original Code and/or Modifications of Original Code
+ * as defined in and that are subject to the Apple Public Source License
+ * Version 2.0 (the 'License'). You may not use this file except in
+ * compliance with the License. Please obtain a copy of the License at
+ * http://www.opensource.apple.com/apsl/ and read it before using this
+ * file.
+ * 
+ * The Original Code and all software distributed under the License are
+ * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
+ * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
+ * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
+ * Please see the License for the specific language governing rights and
+ * limitations under the License.
+ * 
+ * @APPLE_LICENSE_HEADER_END@
+ */
+#ifdef WIN32
+#define SNPRINTF(...)	sprintf_s(__VA_ARGS__)
+#define STRLCAT(d,s,n)	strcat_s((d),(n),(s))
+#define STRLCPY(d,s,n)	strcpy_s((d),(n),(s))
+#else /* !WIN32 */
+#define SNPRINTF(...)	snprintf(__VA_ARGS__)
+#define STRLCAT(d,s,n)	strlcat((d),(s),(n))
+#define STRLCPY(d,s,n)	strlcpy((d),(s),(n))
+#endif /* WIN32 */
--- minigzip.c.orig	2005-05-27 23:40:50.000000000 -0700
+++ minigzip.c	2008-07-29 11:38:24.000000000 -0700
@@ -17,6 +17,7 @@
 
 #include <stdio.h>
 #include "zlib.h"
+#include "local.h"
 
 #ifdef STDC
 #  include <string.h>
@@ -198,8 +199,8 @@
     FILE  *in;
     gzFile out;
 
-    strcpy(outfile, file);
-    strcat(outfile, GZ_SUFFIX);
+    STRLCPY(outfile, file, sizeof(outfile));
+    STRLCAT(outfile, GZ_SUFFIX, sizeof(outfile));
 
     in = fopen(file, "rb");
     if (in == NULL) {
@@ -229,7 +230,7 @@
     gzFile in;
     uInt len = (uInt)strlen(file);
 
-    strcpy(buf, file);
+    STRLCPY(buf, file, sizeof(buf));
 
     if (len > SUFFIX_LEN && strcmp(file+len-SUFFIX_LEN, GZ_SUFFIX) == 0) {
         infile = file;
@@ -238,7 +239,7 @@
     } else {
         outfile = file;
         infile = buf;
-        strcat(infile, GZ_SUFFIX);
+        STRLCAT(infile, GZ_SUFFIX, sizeof(buf));
     }
     in = gzopen(infile, "rb");
     if (in == NULL) {
@@ -274,7 +275,7 @@
     gzFile file;
     char outmode[20];
 
-    strcpy(outmode, "wb6 ");
+    STRLCPY(outmode, "wb6 ", sizeof(outmode));
 
     prog = argv[0];
     argc--, argv++;
